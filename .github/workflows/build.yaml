name: Docker Image CI

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:

  build:

    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
 
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Github Slug Action
      uses: rlespinasse/github-slug-action@v4.4.1
    - name: Get tag image
      run: |
        if [[ ${{ github.event_name }} = 'release' ]]; then TAG_NAME=$GITHUB_REF_SLUG; else TAG_NAME=$GITHUB_HEAD_REF_SLUG-${GIT_SHA:0:7}-$(date +%s); fi;
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }}" >> $GITHUB_OUTPUT
      id: gettagimage
    - name: check tag
      run: echo ${{ steps.gettagimage.outputs.TAG_NAME }}
    - name: Deploy Image
      if: "!contains(github.event.head_commit.message, 'chore')"
      run: |
        cd deployment
        sed -ri 's/^(\s*)(image\s*:.*$)/\1image: '"${{ steps.gettagimage.outputs.DOCKER_REPOSITORY }}/gtoken-webhook:${{ steps.gettagimage.outputs.TAG_NAME }}"'/' deployment.yaml
        cd ..
        git config --global user.email "${{ steps.inst.outputs.email }}" && git config --global user.name "${{ steps.inst.outputs.name }}" && git add . && git commit -m "feat(chore): change version ${{ secrets.DOCKER_REPOSITORY }}/gtoken(-webhook) image"
        if [[ ${{ github.event_name }} = 'release' ]]; then git checkout -b chore/changeversion; git push origin chore/changeversion; gh pr create --title "Chore: change version image in deployment" --body "chore: change version image in deployment" -B "master"; else git push origin $GITHUB_REF_NAME; fi;
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_ACCOUNT }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
            ${{ runner.os }}-buildx-

    - name: Build and push gtoken Docker image
      uses: docker/build-push-action@v4
      with:
        context: cmd/gtoken
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        push: true
        tags: ${{ secrets.DOCKER_REPOSITORY }}/gtoken:${{ steps.gettagimage.outputs.TAG_NAME }}

    - name: Build and push gtoken:alpine Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v4
      with:
        context: cmd/gtoken
        target: certs
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        push: true
        tags: ${{ secrets.DOCKER_REPOSITORY }}/gtoken:${{ steps.gettagimage.outputs.TAG_NAME }}-alpine
        build-args: |
          "IMAGE_DOCKER=${{ secrets.DOCKER_REPOSITORY }}/gtoken:${{ steps.gettagimage.outputs.TAG_NAME }}-alpine"

    - name: Build and push gtoken-webhook Docker image
      uses: docker/build-push-action@v4
      with:
        context: cmd/gtoken-webhook
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        push: true
        tags: ${{ secrets.DOCKER_REPOSITORY }}/gtoken-webhook:${{ steps.gettagimage.outputs.TAG_NAME }}
        build-args: |
          "IMAGE_DOCKER=${{ secrets.DOCKER_REPOSITORY }}/gtoken:${{ steps.gettagimage.outputs.TAG_NAME }}"
    - name: Install semantic release
      id: inst
      shell: bash
      run: |
        python3 -m pip install python-semantic-release
        echo "go to release"
        echo "email=$(git log -n 1 --pretty=format:%ae)" >> $GITHUB_OUTPUT
        echo "name=$(git log -n 1 --pretty=format:%an)" >> $GITHUB_OUTPUT
